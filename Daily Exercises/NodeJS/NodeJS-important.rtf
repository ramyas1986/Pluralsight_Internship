{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red5\green10\blue30;\red255\green255\blue255;\red24\green25\blue27;
\red33\green39\blue42;\red244\green245\blue247;}
{\*\expandedcolortbl;;\cssrgb\c1569\c4706\c15686;\cssrgb\c100000\c100000\c100000;\cssrgb\c12549\c12941\c14118;
\cssrgb\c17255\c20392\c21569;\cssrgb\c96471\c96863\c97647;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Type node and enter\
\
.editor can be used to type multiple lines in terminal, after typing code hit Ctrl+D to evaluate the code\
\
.break command \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 allows you to terminate and exit a loop (that is, do , for , and while ) or switch command from any point other than the logical end\cf4 \strokec4  in terminal.\
\
\cf5 \cb6 \strokec5 .save\cb3 : saves all you entered in the REPL session to a file (specify the filename)\
.save m7.js\
Then inspect the content of file, more m7.js and hit enter this file will have all the lines that we previously typed in the REPL session.\
\
.load m7.js and hit enter evaluates the function stored in this file.\cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
Type c and double tab then you will see all the possible keywords and functions that start with C\
\
\
Array. And then  double tab and the list of functions and properties that can be used from the array class are displayed.\
\
If I have an array object in REPL session, then\
Const arr=[]\
arr. double tab gets the list of all the methods available on this object. If you can\'92t remember the name of the method you need, this list is helpful.\
\
\
.help or . Double tab and Then enter\
\
Space and double tab with enter gives a list of global available keywords or classes\
\
\
_ can be used to save this for the previous used expression\
Ex: \
Math.random()\
Const random = _\
\
\
We do not give node_modules folder to other team members. So we remove that by rm -rf node_modules\
Then, just run \'93npm i\'94 to install the dependencies and subdependencies listed in the package.json file.\
\
\
Update node\
Update npm -> npm install -g rpm\
Npm i express\
\
To create a package.json file for a already existing project, do \'93npm init \'97yes\'94 command\
\
\
Npm i -g create-react-app    -> just use create-react-app anywhere in the terminal\
\
\
The node_modules folder is simply the connection between npm and Node.\
\
Create an account in npmjs.com and use as npm i ramya-s-frame-print\
Do npm login and provide the credentials. Now create a package.json file by doing \'93npm init\'94 by entering into that folder. Now package.json is created. Now do \'93npm publish\'94. Now go to url: https://www.npmjs.com/package/ramya-s-frame-print and the package can be used by anybody.\
Now, npm i ramya-s-frame-print in the test folder. Now node_modules is created in the test directory Ramya-s-frame-print is created under node_modules folder. Now run \'93node index.js\'94\
\
\
When any changes are done, the node has to be restarted. So, to overcome this do\
Npm install -g nodemon\
Nodemon 1-hello-world.js\
\
This monitors the file save events and reload itself when files are saved.\
\
\
\
Debug node files in chrome dev tools:\
In the terminal: node \'97inspect-brk filename\
Now go to chrome and type in the url: chrome://inspect \
Then click on inspect\
Then set breakpoints and run the code\
\
\
Npm  install express\
Npm install chalk\
Npm install debug => DEBUG=app node app.js\
Npm install Morgan\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Npm install -g nodemon\
Npm install pjs\
\
Npm install \'97save express\
\
\
\
}